#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Binance LSTM Kripto Tahmin Botu - Sim√ºlasyon Paneli
"""

import os
import time
import logging
import threading
from datetime import datetime
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

import config
import utils

logger = logging.getLogger(__name__)


class SimulationPanel(ttk.Frame):
    """Sim√ºlasyon Paneli Sƒ±nƒ±fƒ±"""

    def __init__(self, parent, simulator, api_manager, data_fetcher, model_manager, indicator_calculator, log_callback,
                 status_callback):
        """
        Sim√ºlasyon panelini ba≈ülatƒ±r

        Args:
            parent: √úst widget
            simulator: Sim√ºlasyon mod√ºl√º
            api_manager: API y√∂neticisi
            data_fetcher: Veri √ßekme mod√ºl√º
            model_manager: Model y√∂netim mod√ºl√º
            indicator_calculator: G√∂sterge hesaplama mod√ºl√º
            log_callback: Log mesajƒ± callback fonksiyonu
            status_callback: Durum g√ºncelleme callback fonksiyonu
        """
        super().__init__(parent, padding=10)
        self.simulator = simulator
        self.api_manager = api_manager
        self.data_fetcher = data_fetcher
        self.model_manager = model_manager
        self.indicator_calculator = indicator_calculator
        self.log_callback = log_callback
        self.status_callback = status_callback
        self.root = parent  # Ana pencere referansƒ± eklendi

        # Sim√ºlat√∂r callback'lerini ayarla
        self.simulator.log_callback = self.log_callback
        self.simulator.progress_callback = lambda current, total, loss, val_loss: self.update_progress(
            "Model Eƒüitimi", current, total, f"Loss: {loss:.4f}, Val: {val_loss:.4f}"
        )
        self.simulator.result_callback = None

        # Deƒüi≈ükenler
        self.symbol_var = tk.StringVar(value="BTCUSDT")
        self.interval_var = tk.StringVar(value="1h")
        self.lookback_days_var = tk.StringVar(value="60")
        self.initial_balance_var = tk.StringVar(value=str(config.DEFAULT_SIMULATION_PARAMS['initial_balance']))
        self.fee_percent_var = tk.StringVar(value=str(config.DEFAULT_SIMULATION_PARAMS['fee_percent']))
        self.stop_loss_percent_var = tk.StringVar(value=str(config.DEFAULT_SIMULATION_PARAMS['stop_loss_percent']))
        self.take_profit_percent_var = tk.StringVar(value=str(config.DEFAULT_SIMULATION_PARAMS['take_profit_percent']))
        self.position_size_percent_var = tk.StringVar(
            value=str(config.DEFAULT_SIMULATION_PARAMS['position_size_percent']))
        self.selected_indicators = {}
        self.real_time_var = tk.BooleanVar(value=False)

        # ƒ∞ndikat√∂r deƒüi≈ükenlerini doldur
        for group, indicators in config.INDICATOR_GROUPS.items():
            for indicator in indicators:
                self.selected_indicators[indicator] = tk.BooleanVar(value=False)

        # Varsayƒ±lan g√∂stergeler
        default_indicators = ['RSI_14', 'MACD', 'Bollinger_Bands_20_2', 'SMA_20', 'EMA_20']
        for indicator in default_indicators:
            if indicator in self.selected_indicators:
                self.selected_indicators[indicator].set(True)

        # Ge√ßici deƒüi≈ükenler
        self.current_df = None
        self.current_model_path = None
        self.is_simulation_running = False

        # GUI olu≈ütur
        self.create_left_panel()
        self.create_right_panel()

    def update_progress(self, task_name, current, total, status=""):
        import inspect
        print("üü¢ update_progress √ßaƒürƒ±ldƒ±")
        print("üìÅ Kaynak dosya:", inspect.getfile(self.update_progress))

        try:
            percent = (current / total) * 100
            message = f"{task_name}: {current}/{total} - {status}"
            self._update_progress_gui(percent, message)
        except Exception as e:
            print(f"update_progress hatasƒ±: {e}")

    # Esnek arg√ºmanlarla g√ºncellenmi≈ü
    def _update_progress_gui(self, progress, message):
        """GUI bile≈üenlerini g√ºnceller (ana thread'de √ßalƒ±≈ütƒ±rƒ±lmalƒ±)"""
        try:
            # Progress bar'ƒ± g√ºncelle (√∂nemli deƒüi≈üiklerde)
            if abs(progress - self.progress_var.get()) > 1 or progress in (0, 100):
                self.progress_var.set(progress)
                self.progress_label.config(text=f"{progress:.1f}%")

            # Durum mesajƒ±nƒ± g√ºncelle
            if message:
                self.status_callback(message, "Aktif")
        except Exception as e:
            logger.error(f"Progress g√ºncelleme hatasƒ±: {str(e)}")

    def create_left_panel(self):
        """Sol panel olu≈üturur (ayarlar)"""
        left_panel = ttk.Frame(self)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))

        # Veri Se√ßimi
        data_frame = ttk.LabelFrame(left_panel, text="Veri Se√ßimi", padding=10)
        data_frame.pack(fill=tk.X, pady=5)

        # Sembol
        ttk.Label(data_frame, text="Sembol:").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Entry(data_frame, textvariable=self.symbol_var, width=15).grid(row=0, column=1, pady=2, padx=5, sticky=tk.W)

        # Zaman Dilimi
        ttk.Label(data_frame, text="Zaman Dilimi:").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Combobox(data_frame, textvariable=self.interval_var, width=13,
                     values=["5m", "15m", "30m", "1h", "2h", "4h", "6h", "12h", "1d"]).grid(row=1, column=1, pady=2,
                                                                                            padx=5, sticky=tk.W)

        # Geriye D√∂n√ºk G√ºnler
        ttk.Label(data_frame, text="Geriye D√∂n√ºk (g√ºn):").grid(row=2, column=0, sticky=tk.W, pady=2)
        ttk.Entry(data_frame, textvariable=self.lookback_days_var, width=15).grid(row=2, column=1, pady=2, padx=5,
                                                                                  sticky=tk.W)

        # Veri Butonlarƒ±
        button_frame = ttk.Frame(data_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=5)

        ttk.Button(button_frame, text="Veri √áek", command=self.fetch_data).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="G√∂stergeleri Hesapla", command=self.calculate_indicators).pack(side=tk.LEFT,
                                                                                                      padx=5)

        # G√∂stergeler
        indicators_frame = ttk.LabelFrame(left_panel, text="G√∂stergeler", padding=10)
        indicators_frame.pack(fill=tk.BOTH, expand=True, pady=5)

        # Notebook ile g√∂sterge gruplarƒ±
        indicators_notebook = ttk.Notebook(indicators_frame)
        indicators_notebook.pack(fill=tk.BOTH, expand=True)

        # Her g√∂sterge grubu i√ßin bir sekme olu≈ütur
        for group, indicators in config.INDICATOR_GROUPS.items():
            group_frame = ttk.Frame(indicators_notebook, padding=5)
            indicators_notebook.add(group_frame, text=group)

            # G√∂stergeleri iki s√ºtunda yerle≈ütir
            for i, indicator in enumerate(indicators):
                row = i // 2
                col = i % 2

                if indicator in self.selected_indicators:
                    ttk.Checkbutton(
                        group_frame,
                        text=indicator,
                        variable=self.selected_indicators[indicator]
                    ).grid(row=row, column=col, sticky=tk.W, padx=5, pady=2)

        # Sim√ºlasyon Ayarlarƒ±
        sim_frame = ttk.LabelFrame(left_panel, text="Sim√ºlasyon Ayarlarƒ±", padding=10)
        sim_frame.pack(fill=tk.X, pady=5)

        # Ba≈ülangƒ±√ß Bakiyesi
        ttk.Label(sim_frame, text="Ba≈ülangƒ±√ß Bakiyesi ($):").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Entry(sim_frame, textvariable=self.initial_balance_var, width=10).grid(row=0, column=1, pady=2, padx=5,
                                                                                   sticky=tk.W)

        # ƒ∞≈ülem √úcreti
        ttk.Label(sim_frame, text="ƒ∞≈ülem √úcreti (%):").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Entry(sim_frame, textvariable=self.fee_percent_var, width=10).grid(row=1, column=1, pady=2, padx=5,
                                                                               sticky=tk.W)

        # Stop Loss
        ttk.Label(sim_frame, text="Stop Loss (%):").grid(row=2, column=0, sticky=tk.W, pady=2)
        ttk.Entry(sim_frame, textvariable=self.stop_loss_percent_var, width=10).grid(row=2, column=1, pady=2, padx=5,
                                                                                     sticky=tk.W)

        # Take Profit
        ttk.Label(sim_frame, text="Take Profit (%):").grid(row=3, column=0, sticky=tk.W, pady=2)
        ttk.Entry(sim_frame, textvariable=self.take_profit_percent_var, width=10).grid(row=3, column=1, pady=2, padx=5,
                                                                                       sticky=tk.W)

        # Pozisyon Boyutu
        ttk.Label(sim_frame, text="Pozisyon Boyutu (%):").grid(row=4, column=0, sticky=tk.W, pady=2)
        ttk.Entry(sim_frame, textvariable=self.position_size_percent_var, width=10).grid(row=4, column=1, pady=2,
                                                                                         padx=5, sticky=tk.W)

        # Ger√ßek Zamanlƒ± Sim√ºlasyon
        ttk.Checkbutton(sim_frame, text="Ger√ßek Zamanlƒ± Sim√ºlasyon", variable=self.real_time_var).grid(row=5, column=0,
                                                                                                       columnspan=2,
                                                                                                       sticky=tk.W,
                                                                                                       pady=5)

        # Sim√ºlasyon Butonlarƒ±
        sim_button_frame = ttk.Frame(left_panel)
        sim_button_frame.pack(fill=tk.X, pady=10)

        # Model i≈ülemleri i√ßin butonlar
        self.train_button = ttk.Button(sim_button_frame, text="Model Eƒüit", command=self.train_model, state=tk.DISABLED)
        self.train_button.pack(side=tk.LEFT, padx=5)

        self.load_model_button = ttk.Button(sim_button_frame, text="Model Y√ºkle", command=self.load_model)
        self.load_model_button.pack(side=tk.LEFT, padx=5)

        # ƒ∞kinci buton satƒ±rƒ±
        sim_button_frame2 = ttk.Frame(left_panel)
        sim_button_frame2.pack(fill=tk.X, pady=5)

        # Sim√ºlasyon butonlarƒ±
        self.start_sim_button = ttk.Button(sim_button_frame2, text="Sim√ºlasyonu Ba≈ülat", command=self.start_simulation,
                                           state=tk.DISABLED)
        self.start_sim_button.pack(side=tk.LEFT, padx=5)

        self.stop_sim_button = ttk.Button(sim_button_frame2, text="Sim√ºlasyonu Durdur", command=self.stop_simulation,
                                          state=tk.DISABLED)
        self.stop_sim_button.pack(side=tk.LEFT, padx=5)

    def create_right_panel(self):
        """Saƒü panel olu≈üturur (sonu√ßlar)"""
        right_panel = ttk.Frame(self)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        # Grafik Alanƒ±
        chart_frame = ttk.LabelFrame(right_panel, text="Fiyat ve Tahmin Grafiƒüi", padding=10)
        chart_frame.pack(fill=tk.BOTH, expand=True, pady=5)

        # Grafik i√ßin yer tutucu
        self.chart_placeholder = ttk.Label(chart_frame,
                                           text="Veri y√ºkleyip model eƒüitince grafik burada g√∂r√ºnt√ºlenecek")
        self.chart_placeholder.pack(fill=tk.BOTH, expand=True)

        # ƒ∞lerleme √ßer√ßevesi
        progress_frame = ttk.Frame(right_panel)
        progress_frame.pack(fill=tk.X, pady=5)

        # ƒ∞lerleme √ßubuƒüu
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, length=100, mode='determinate')
        self.progress_bar.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        self.progress_label = ttk.Label(progress_frame, text="0%")
        self.progress_label.pack(side=tk.RIGHT, padx=5)

        # Sonu√ß √∂zeti
        self.results_frame = ttk.LabelFrame(right_panel, text="Sim√ºlasyon Sonu√ßlarƒ±", padding=10)
        self.results_frame.pack(fill=tk.X, pady=5)

        # Placeholder
        self.results_placeholder = ttk.Label(self.results_frame, text="Sim√ºlasyon sonu√ßlarƒ± burada g√∂r√ºnt√ºlenecek")
        self.results_placeholder.pack(fill=tk.X)

    def fetch_data(self):
        """Veri √ßeker"""
        if not self.api_manager.connected:
            self.log_callback("API baƒülantƒ±sƒ± kurulmamƒ±≈ü!", error=True)
            messagebox.showerror("Hata", "√ñnce API baƒülantƒ±sƒ±nƒ± kurmanƒ±z gerekiyor!")
            return

        try:
            symbol = self.symbol_var.get().strip().upper()
            interval = self.interval_var.get()
            lookback_days = int(self.lookback_days_var.get())

            if not symbol:
                messagebox.showerror("Hata", "L√ºtfen bir sembol girin!")
                return

            self.log_callback(f"{symbol} i√ßin {interval} veri √ßekiliyor ({lookback_days} g√ºn)...")
            self.status_callback("Veri √ßekiliyor...", "Aktif")

            # ƒ∞lerleme √ßubuƒüunu sƒ±fƒ±rla
            self.progress_var.set(0)
            self.progress_label.config(text="0%")

            # Veri √ßekme i≈ülemi
            def fetch_data_thread():
                try:
                    df = self.data_fetcher.fetch_historical_data(
                        symbol=symbol,
                        interval=interval,
                        lookback_days=lookback_days
                    )

                    if df is not None and len(df) > 0:
                        self.current_df = df
                        self.root.after(0, lambda: self.on_data_fetched(df))
                    else:
                        self.root.after(0, lambda: self.log_callback(f"{symbol} i√ßin veri √ßekilemedi!", error=True))
                        self.root.after(0, lambda: messagebox.showerror("Hata", f"{symbol} i√ßin veri √ßekilemedi!"))
                except Exception as e:
                    self.root.after(0, lambda: self.log_callback(f"Veri √ßekilirken hata: {str(e)}", error=True))
                    self.root.after(0, lambda: messagebox.showerror("Hata", f"Veri √ßekilirken hata: {str(e)}"))
                finally:
                    self.root.after(0, lambda: self.status_callback("Hazƒ±r", "Aktif"))

            # Thread ba≈ülat
            thread = threading.Thread(target=fetch_data_thread)
            thread.daemon = True
            thread.start()

        except Exception as e:
            self.log_callback(f"Veri √ßekme parametrelerinde hata: {str(e)}", error=True)
            messagebox.showerror("Hata", f"Veri √ßekme parametrelerinde hata: {str(e)}")

    def on_data_fetched(self, df):
        """
        Veri √ßekildikten sonra √ßaƒürƒ±lƒ±r

        Args:
            df (pd.DataFrame): √áekilen veri
        """
        self.log_callback(f"Veri ba≈üarƒ±yla √ßekildi: {len(df)} satƒ±r.")

        # ƒ∞lerleme √ßubuƒüunu g√ºncelle
        self.progress_var.set(100)
        self.progress_label.config(text="100%")

        # Basit grafik g√∂ster
        self.draw_price_chart(df)

        # Calculate Indicators butonunu etkinle≈ütir
        self.train_button.config(state=tk.DISABLED)
        self.start_sim_button.config(state=tk.DISABLED)

    def draw_price_chart(self, df):
        """Fiyat grafiƒüi √ßizer"""
        # Eski grafiƒüi temizle
        for widget in self.chart_placeholder.winfo_children():
            widget.destroy()

        # Yeni grafik olu≈ütur
        fig, ax = plt.subplots(figsize=(10, 5))
        df['close'].plot(ax=ax, title=f"{self.symbol_var.get()} Fiyat Grafiƒüi", grid=True)
        plt.tight_layout()

        # Tkinter'a yerle≈ütir
        canvas = FigureCanvasTkAgg(fig, master=self.chart_placeholder)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    def calculate_indicators(self):
        """G√∂stergeleri hesaplar"""
        if self.current_df is None:
            messagebox.showinfo("Bilgi", "√ñnce veri √ßekmelisiniz.")
            return

        try:
            # Se√ßilen g√∂stergeleri al
            selected = [indicator for indicator, var in self.selected_indicators.items() if var.get()]

            if not selected:
                # Kullanƒ±cƒ±ya bilgi ver
                if messagebox.askyesno("G√∂sterge Se√ßimi",
                                       "Hi√ß g√∂sterge se√ßilmedi. Varsayƒ±lan g√∂stergeleri kullanmak ister misiniz?"):
                    # Varsayƒ±lan g√∂stergeler
                    selected = ['RSI_14', 'MACD', 'Bollinger_Bands_20_2', 'SMA_20', 'EMA_20']

                    # G√∂sterge deƒüi≈ükenlerini g√ºncelle
                    for indicator in selected:
                        if indicator in self.selected_indicators:
                            self.selected_indicators[indicator].set(True)
                else:
                    return

            self.log_callback(f"Se√ßilen g√∂stergeler hesaplanƒ±yor: {', '.join(selected)}")
            self.status_callback("G√∂stergeler hesaplanƒ±yor...", "Aktif")

            # ƒ∞lerleme √ßubuƒüunu sƒ±fƒ±rla
            self.progress_var.set(0)
            self.progress_label.config(text="0%")

            # G√∂sterge hesaplama i≈ülemi
            def calculate_indicators_thread():
                try:
                    df_with_indicators = self.indicator_calculator.calculate_indicators(
                        self.current_df, selected
                    )

                    # √ñzel √∂znitelikler ekle
                    df_with_indicators = self.indicator_calculator.add_custom_features(df_with_indicators)

                    if df_with_indicators is not None:
                        self.current_df = df_with_indicators
                        self.root.after(0, lambda: self.on_indicators_calculated(df_with_indicators))
                    else:
                        self.root.after(0, lambda: self.log_callback("G√∂stergeler hesaplanamadƒ±!", error=True))
                        self.root.after(0, lambda: messagebox.showerror("Hata", "G√∂stergeler hesaplanamadƒ±!"))
                except Exception as e:
                    self.root.after(0,
                                    lambda: self.log_callback(f"G√∂stergeler hesaplanƒ±rken hata: {str(e)}", error=True))
                    self.root.after(0,
                                    lambda: messagebox.showerror("Hata", f"G√∂stergeler hesaplanƒ±rken hata: {str(e)}"))
                finally:
                    self.root.after(0, lambda: self.status_callback("Hazƒ±r", "Aktif"))
                    self.root.after(0, lambda: self.progress_var.set(100))
                    self.root.after(0, lambda: self.progress_label.config(text="100%"))

            # Thread ba≈ülat
            thread = threading.Thread(target=calculate_indicators_thread)
            thread.daemon = True
            thread.start()

        except Exception as e:
            self.log_callback(f"G√∂sterge hesaplama hatasƒ±: {str(e)}", error=True)
            messagebox.showerror("Hata", f"G√∂sterge hesaplama hatasƒ±: {str(e)}")

    def on_indicators_calculated(self, df):
        """
        G√∂stergeler hesaplandƒ±ktan sonra √ßaƒürƒ±lƒ±r

        Args:
            df (pd.DataFrame): G√∂stergelerle birlikte veri
        """
        self.log_callback(f"G√∂stergeler hesaplandƒ±. Veri boyutu: {df.shape}")

        # ƒ∞ndikat√∂rlerle birlikte grafik g√∂ster
        self.draw_indicators_chart(df)

        # Train Model butonunu etkinle≈ütir
        self.train_button.config(state=tk.NORMAL)
        self.start_sim_button.config(state=tk.DISABLED)

    def draw_indicators_chart(self, df):
        """ƒ∞ndikat√∂rlerle birlikte grafik √ßizer"""
        # Eski grafiƒüi temizle
        for widget in self.chart_placeholder.winfo_children():
            widget.destroy()

        # Yeni grafik olu≈ütur
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8), gridspec_kw={'height_ratios': [2, 1]})

        # Fiyat grafiƒüi
        df['close'].plot(ax=ax1, title=f"{self.symbol_var.get()} Fiyat ve G√∂stergeler", grid=True)

        # ƒ∞ndikat√∂r grafiƒüi (√∂rnek olarak RSI)
        if 'RSI_14' in df.columns:
            df['RSI_14'].plot(ax=ax2, title="RSI", grid=True)
            ax2.axhline(70, color='r', linestyle='--')
            ax2.axhline(30, color='g', linestyle='--')

        plt.tight_layout()

        # Tkinter'a yerle≈ütir
        canvas = FigureCanvasTkAgg(fig, master=self.chart_placeholder)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    def train_model(self):
        """Modeli eƒüitir"""
        if self.current_df is None:
            messagebox.showinfo("Bilgi", "√ñnce veri √ßekip g√∂stergeleri hesaplamalƒ±sƒ±nƒ±z.")
            return

        try:
            self.train_button.config(state=tk.DISABLED)
            self.log_callback("Model eƒüitimi ba≈ülatƒ±lƒ±yor...")
            self.status_callback("Model eƒüitiliyor...", "Aktif")

            # ƒ∞lerleme √ßubuƒüunu sƒ±fƒ±rla
            self.progress_var.set(0)
            self.progress_label.config(text="0%")

            def train_model_thread():
                try:
                    # √ñnce model_manager'ƒ±n symbol ve interval deƒüerlerini ayarla
                    self.model_manager.symbol = self.symbol_var.get()
                    self.model_manager.interval = self.interval_var.get()

                    # Veriyi hazƒ±rla
                    X_train, y_train, X_test, y_test, scaler = self.model_manager.prepare_data(self.current_df)

                    # Modeli olu≈ütur
                    input_shape = (X_train.shape[1], X_train.shape[2])
                    self.model_manager.build_model(input_shape)

                    # Modeli eƒüit (doƒüru parametrelerle)
                    history = self.model_manager.train_model(
                        X_train,
                        y_train,
                        epochs=config.DEFAULT_MODEL_PARAMS['epochs'],
                        batch_size=config.DEFAULT_MODEL_PARAMS['batch_size'],
                        progress_callback=lambda current, total, loss, val_loss: self.update_progress("Model Eƒüitimi",
                                                                                                      current, total,
                                                                                                      f"Loss: {loss:.4f}, Val: {val_loss:.4f}"), )

                    # Modeli deƒüerlendir
                    eval_results = self.model_manager.evaluate_model(X_test, y_test)

                    # Modeli kaydet
                    trained_model_path = self.model_manager.save_model()

                    if trained_model_path:
                        self.current_model_path = trained_model_path
                        self.root.after(0, lambda: self.on_model_trained(trained_model_path))
                    else:
                        self.root.after(0, lambda: self.log_callback("Model eƒüitilemedi!", error=True))
                        self.root.after(0, lambda: messagebox.showerror("Hata", "Model eƒüitilemedi!"))
                except Exception as e:
                    self.root.after(0, lambda: self.log_callback(f"Model eƒüitilirken hata: {str(e)}", error=True))
                    self.root.after(0, lambda: messagebox.showerror("Hata", f"Model eƒüitilirken hata: {str(e)}"))
                finally:
                    self.root.after(0, lambda: self.status_callback("Hazƒ±r", "Aktif"))
                    self.root.after(0, lambda: self.train_button.config(state=tk.NORMAL))

            # Thread ba≈ülat
            thread = threading.Thread(target=train_model_thread)
            thread.daemon = True
            thread.start()

        except Exception as e:
            self.log_callback(f"Model eƒüitimi ba≈ülatƒ±lƒ±rken hata: {str(e)}", error=True)
            messagebox.showerror("Hata", f"Model eƒüitimi ba≈ülatƒ±lƒ±rken hata: {str(e)}")
            self.train_button.config(state=tk.NORMAL)

    def on_model_trained(self, model_path):
        """
        Model eƒüitildikten sonra √ßaƒürƒ±lƒ±r

        Args:
            model_path (str): Eƒüitilen modelin kaydedildiƒüi yol
        """
        self.log_callback(f"Model ba≈üarƒ±yla eƒüitildi ve kaydedildi: {model_path}")
        messagebox.showinfo("Ba≈üarƒ±lƒ±", "Model ba≈üarƒ±yla eƒüitildi!")

        # Sim√ºlasyon butonunu etkinle≈ütir
        self.start_sim_button.config(state=tk.NORMAL)

    def load_model(self, model_path):
        try:
            if not os.path.exists(model_path):
                logger.error(f"Model dosyasƒ± bulunamadƒ±: {model_path}")
                return False

            self.model = keras.models.load_model(model_path, compile=False)
            self.model.compile(optimizer='adam', loss='mse')  # ‚úÖ Bu satƒ±r tam burada olmalƒ±
            self.is_trained = True

            logger.info(f"Model y√ºklendi: {model_path}")
            return True

        except Exception as e:
            logger.error(f"Model y√ºklenirken hata: {str(e)}")
            return False



        except Exception as e:
            self.log_callback(f"Model y√ºklenirken hata: {str(e)}", error=True)
            messagebox.showerror("Hata", f"Model y√ºklenirken hata: {str(e)}")

    def start_simulation(self):
        """Sim√ºlasyonu ba≈ülatƒ±r"""
        if self.current_model_path is None:
            messagebox.showinfo("Bilgi", "√ñnce veri √ßekip model y√ºklemelisiniz.")
            return

        try:
            # Parametreleri al
            params = {
                'initial_balance': float(self.initial_balance_var.get()),
                'fee_percent': float(self.fee_percent_var.get()) / 100,
                'stop_loss_percent': float(self.stop_loss_percent_var.get()) / 100,
                'take_profit_percent': float(self.take_profit_percent_var.get()) / 100,
                'position_size_percent': float(self.position_size_percent_var.get()) / 100,
                'real_time': self.real_time_var.get()
            }

            self.log_callback("Sim√ºlasyon ba≈ülatƒ±lƒ±yor...")
            self.status_callback("Sim√ºlasyon √ßalƒ±≈üƒ±yor...", "Aktif")
            self.is_simulation_running = True

            self.start_sim_button.config(state=tk.DISABLED)
            self.stop_sim_button.config(state=tk.NORMAL)

            def simulation_thread():
                try:
                    real_time_mode = params.pop("real_time", False)

                    if real_time_mode:
                        self.simulator.run_simulation(
                            data=self.symbol_var.get(),
                            model_path=self.current_model_path,
                            real_time=True,
                            progress_callback=self.update_progress,
                            log_callback=self.log_callback,
                            status_callback=self.status_callback,
                            **params
                        )
                    else:
                        if self.current_df is None:
                            raise ValueError("Sim√ºlasyon i√ßin veri y√ºklenmedi!")

                        results = self.simulator.run_simulation(
                            self.current_df,
                            self.current_model_path,
                            progress_callback=lambda current, total, loss: self.update_progress(
                                "Sim√ºlasyon", current, total, f"Loss: {loss:.4f}"
                            ),
                            **params
                        )

                        if results and self.is_simulation_running:
                            self.root.after(0, lambda: self.on_simulation_complete(results))
                        else:
                            self.root.after(0, lambda: self.log_callback("Sim√ºlasyon durduruldu!", error=True))
                except Exception as e:
                    error_msg = str(e)
                    self.root.after(0, lambda: self.log_callback(f"Sim√ºlasyon sƒ±rasƒ±nda hata: {error_msg}", error=True))
                    self.root.after(0, lambda: messagebox.showerror("Hata", f"Sim√ºlasyon sƒ±rasƒ±nda hata: {error_msg}"))
                finally:
                    self.root.after(0, lambda: self.status_callback("Hazƒ±r", "Aktif"))
                    self.root.after(0, lambda: self.start_sim_button.config(state=tk.NORMAL))
                    self.root.after(0, lambda: self.stop_sim_button.config(state=tk.DISABLED))
                    self.is_simulation_running = False

            thread = threading.Thread(target=simulation_thread)
            thread.daemon = True
            thread.start()

        except Exception as e:
            self.log_callback(f"Sim√ºlasyon ba≈ülatƒ±lƒ±rken hata: {str(e)}", error=True)
            messagebox.showerror("Hata", f"Sim√ºlasyon ba≈ülatƒ±lƒ±rken hata: {str(e)}")
            self.start_sim_button.config(state=tk.NORMAL)
            self.stop_sim_button.config(state=tk.DISABLED)
            self.is_simulation_running = False

    def stop_simulation(self):
        """Sim√ºlasyonu durdurur"""
        self.is_simulation_running = False
        self.simulator.stop_simulation()
        self.log_callback("Sim√ºlasyon durduruluyor...")
        self.status_callback("Sim√ºlasyon durduruluyor...", "Aktif")

    def on_simulation_complete(self, results):
        """
        Sim√ºlasyon tamamlandƒ±ƒüƒ±nda √ßaƒürƒ±lƒ±r

        Args:
            results (dict): Sim√ºlasyon sonu√ßlarƒ±
        """
        self.log_callback("Sim√ºlasyon ba≈üarƒ±yla tamamlandƒ±!")
        messagebox.showinfo("Ba≈üarƒ±lƒ±", "Sim√ºlasyon ba≈üarƒ±yla tamamlandƒ±!")

        # Sonu√ßlarƒ± g√∂ster
        self.show_simulation_results(results)

    def show_simulation_results(self, results):
        """Sim√ºlasyon sonu√ßlarƒ±nƒ± g√∂sterir"""
        # Placeholder'ƒ± temizle
        self.results_placeholder.pack_forget()

        # Sonu√ßlarƒ± g√∂ster
        if 'summary' in results:
            summary = results['summary']

            # √ñzet bilgileri g√∂ster
            result_text = f"""
            Toplam ƒ∞≈ülem: {summary.get('total_trades', 0)}
            Ba≈üarƒ±lƒ± ƒ∞≈ülem: {summary.get('winning_trades', 0)}
            Ba≈üarƒ±sƒ±z ƒ∞≈ülem: {summary.get('losing_trades', 0)}
            Ba≈üarƒ± Oranƒ±: {summary.get('win_rate', 0) * 100:.2f}%
            Toplam Kar/Zarar: ${summary.get('total_pnl', 0):.2f}
            Son Bakiye: ${summary.get('final_balance', 0):.2f}
            """

            result_label = ttk.Label(self.results_frame, text=result_text)
            result_label.pack(fill=tk.X, pady=5)

        # Grafik g√∂ster
        if 'results_df' in results:
            self.draw_simulation_results(results['results_df'])

    def draw_simulation_results(self, results_df):
        """Sim√ºlasyon sonu√ß grafiƒüini √ßizer"""
        # Eski grafiƒüi temizle
        for widget in self.chart_placeholder.winfo_children():
            widget.destroy()

        # Yeni grafik olu≈ütur
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8), gridspec_kw={'height_ratios': [2, 1]})

        # Fiyat ve pozisyonlar
        if 'close' in results_df.columns:
            results_df['close'].plot(ax=ax1, title="Fiyat ve Pozisyonlar", grid=True)

        # Bakiye grafiƒüi
        if 'balance' in results_df.columns:
            results_df['balance'].plot(ax=ax2, title="Bakiye Deƒüi≈üimi", grid=True)

        plt.tight_layout()

        # Tkinter'a yerle≈ütir
        canvas = FigureCanvasTkAgg(fig, master=self.chart_placeholder)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)


def update_progress(self, task_name, current, total, status=""):
    import inspect
    print("üß™ update_progress √ßaƒürƒ±ldƒ±")
    print("üìÅ Bu fonksiyonun dosya yolu:", inspect.getfile(self.update_progress))
    print("üü¢ TEST: update_progress fonksiyonu √áALI≈ûTI")


"""
        Eƒüitim/S√ºre√ß ilerlemesini GUI‚Äôye aktarƒ±r.
        """
try:
    percent = (current / total) * 100
    message = f"{task_name}: {current}/{total} - {status}"
    self._update_progress_gui(percent, message)
except Exception as e:
    print(f"HATA (update_progress): {e}")
